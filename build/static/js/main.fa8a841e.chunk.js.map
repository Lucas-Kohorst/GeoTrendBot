{"version":3,"sources":["logo.svg","map.png","MapElment.jsx","Home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","WrappedSearch","withLeaflet","ReactLeafletSearch","MapElement","props","_callSearchAPI","a","fetch","state","hashtag","response","json","body","status","Error","message","_createMarkers","positions","markers","i","length","push","Marker","position","lat","long","key","Popup","name","timestamp","href","source","target","tweet","search","window","location","value","URLSearchParams","get","streetView","match","params","this","then","res","tweets","user","setState","text","created_at","split","ok","data","features","geometry","coordinates","prevState","error","catch","err","className","center","zoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","openSearchOnLoad","showMarker","showPopup","inputPlaceholder","closeResultsOnClick","LayersControl","BaseLayer","TileLayer","attribution","url","checked","React","Component","Home","style","padding","repo","colorBackground","colorOctocat","side","src","require","alt","height","sourceType","screenName","options","App","path","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fa8a841e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","module.exports = __webpack_public_path__ + \"static/media/map.562ff858.png\";","import React from \"react\";\nimport {\n  Map as LeafletMap,\n  TileLayer,\n  Marker,\n  Popup,\n  LayersControl,\n  withLeaflet, \n  LayerGroup\n} from \"react-leaflet\";\nimport { ReactLeafletSearch } from \"react-leaflet-search\";\n\nconst WrappedSearch = withLeaflet(ReactLeafletSearch);\n\nclass MapElement extends React.Component {\n  constructor(props) {\n    super(props);\n    const search = window.location.search;\n    const params = new URLSearchParams(search);\n    const value = params.get(\"search\");\n\n    this.state = {\n      search: value,\n      positions: [],\n      streetView: null,\n      tweet: \"\",\n      name: \"\",\n      timestamp: \"\",\n      source: \"\",\n      hashtag: props.hashtag ? props.hashtag : props.match.params.hashtag\n    };\n  }\n\n  componentDidMount() {\n    this._callSearchAPI().then(async res => {\n      for (var i = 0; i < res.tweets.length; i++) {\n        if (res.tweets[i].user.location != \"\") {\n          this.setState({\n            tweet: res.tweets[i].text,\n            name: res.tweets[i].user.name,\n            timestamp: res.tweets[i].created_at.split(\"+\")[0] // removing the +milli\n          });\n          await fetch(\n            \"https://api.mapbox.com/geocoding/v5/mapbox.places/\" +\n              res.tweets[i].user.location +\n              \".json?access_token=pk.eyJ1IjoibHVjYXNrb2hvcnN0IiwiYSI6ImNrMmc4ZzR1ajBzYmgzam1vbzBscHo1ajIifQ.mRP73FdC3Fhwe6QShpZhQw\"\n          )\n            .then(response => {\n              if (!response.ok) {\n                throw new Error(\"Network Response Error\");\n              }\n              return response.json();\n            })\n            .then(data => {\n              try {\n                var long = data.features[0].geometry.coordinates[0];\n                var lat = data.features[0].geometry.coordinates[1];\n                var name = this.state.name;\n                var tweet = this.state.tweet;\n                var timestamp = this.state.timestamp;\n                var source = this.state.source;\n                this.setState(prevState => ({\n                  positions: [\n                    ...prevState.positions,\n                    {\n                      lat: lat,\n                      long: long,\n                      name: name,\n                      tweet: tweet,\n                      timestamp: timestamp,\n                      source: source\n                    }\n                  ]\n                }));\n              } catch (error) {}\n            })\n            .catch(err => {});\n        }\n      }\n    });\n  }\n\n  _callSearchAPI = async () => {\n    const response = await fetch(\"/search/\" + this.state.hashtag);\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message);\n    }\n\n    return body;\n  };\n\n  _createMarkers = positions => {\n    let markers = [];\n    for (var i = 0; i < positions.length; i++) {\n      markers.push(\n        <Marker position={[positions[i].lat, positions[i].long]} key={i}>\n          <Popup>\n            <h1>{positions[i].name}</h1>\n            <h3>{positions[i].timestamp}</h3>\n            <a href={positions[i].source} target=\"_blank\">\n              <h2>{positions[i].tweet}</h2>\n            </a>\n          </Popup>\n        </Marker>\n      );\n    }\n    return markers;\n  };\n\n  render() {\n    return (\n      <div>\n        <LeafletMap\n          className=\"sidebar-map\"\n          center={[50, 10]}\n          zoom={3}\n          maxZoom={10}\n          attributionControl={true}\n          zoomControl={true}\n          doubleClickZoom={true}\n          scrollWheelZoom={true}\n          dragging={true}\n          animate={true}\n          easeLinearity={0.35}\n        >\n          <WrappedSearch\n            position=\"topright\"\n            zoom={10}\n            openSearchOnLoad={true}\n            showMarker={false}\n            showPopup={false}\n            inputPlaceholder={\"Search Latitude, Longitude\"}\n            closeResultsOnClick={true}\n          />\n          <LayersControl position=\"bottomleft\">\n              <LayersControl.BaseLayer name=\"OpenStreetMap.BlackAndWhite\">\n                <TileLayer\n                  attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                  url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\n                />\n              </LayersControl.BaseLayer>\n              <LayersControl.BaseLayer name=\"OpenStreetMap.Mapnik\" checked>\n                <TileLayer\n                  attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                  url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n              </LayersControl.BaseLayer>\n          </LayersControl>\n          <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors | Fork me on <a href=\"https://github.com/Lucas-Kohorst/GeoTrendBot\">Github</a>'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          {this._createMarkers(this.state.positions)}\n        </LeafletMap>\n      </div>\n    );\n  }\n}\n\nexport { MapElement };\n","import React from \"react\";\nimport {\n  TwitterTimelineEmbed,\n  TwitterShareButton,\n  TwitterFollowButton,\n  TwitterMentionButton\n} from \"react-twitter-embed\";\nimport ForkMeOnGithub from \"fork-me-on-github\";\nimport \"./App.css\";\n\nclass Home extends React.Component {\n  render() {\n    return (\n      <div style={{ padding: \"2em\" }}>\n        <ForkMeOnGithub\n          repo=\"https://github.com/lucas-kohorst/GeoTrendBot\"\n          colorBackground=\"white\"\n          colorOctocat=\"black\"\n          side=\"right\"\n        />\n        <h1>GeoTrendBot</h1>\n        <p>Visualize trends on Twitter</p>\n        <img src={require(\"./map.png\")} alt=\"Example Map\" height={400} style={{ padding: \"2em\" }}/>\n        <div className=\"centerContent\">\n          <div className=\"selfCenter standardWidth\">\n            <TwitterTimelineEmbed\n              sourceType=\"timeline\"\n              screenName=\"geotrendbot\"\n              options={{ height: 400 }}\n            />\n            <div className={\"flex-row\"}>\n              <TwitterFollowButton screenName={\"geotrendbot\"} />\n              <TwitterMentionButton screenName={\"geotrendbot\"} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport { Home };\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { MapElement } from './MapElment'\nimport { Home } from './Home'\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route path=\"/:hashtag\" component={MapElement}></Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}